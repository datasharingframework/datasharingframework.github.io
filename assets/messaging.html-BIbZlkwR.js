import{_ as t}from"./message_flow-BpPHjVDi.js";import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,b as n,d as a,e as m,w as g,r as l,o as d}from"./app-VRpq1tPx.js";const h={};function c(p,e){const s=l("RouteLink");return d(),o("div",null,[e[4]||(e[4]=i('<h2 id="messaging" tabindex="-1"><a class="header-anchor" href="#messaging"><span>Messaging</span></a></h2><p>Enabling communication with other lanes, pools or even entirely separate processes requires the ability to exchange information. In BPMN, <a href="https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/" target="_blank" rel="noopener noreferrer">Message Events</a> are used to model this information exchange. Modeling communication with <a href="https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/" target="_blank" rel="noopener noreferrer">Message Events</a> in the same diagram uses Message Flow. Message Flow is typically represented by a dashed line arrow between BPMN elements with a black (send) or white (receive) envelope icon. The following BPMN collaboration diagram shows message exchange between two processes.</p><figure><img src="'+t+'" alt="BPMN collaboration diagram with two processes using message flow to exchange information between two organizations" tabindex="0" loading="lazy"><figcaption>BPMN collaboration diagram with two processes using message flow to exchange information between two organizations</figcaption></figure><h3 id="message-start-event" tabindex="-1"><a class="header-anchor" href="#message-start-event"><span>Message Start Event</span></a></h3><p><a href="https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/#message-start-event" target="_blank" rel="noopener noreferrer">Message Start Events</a> allow a BPMN process to be started by an incoming message. In the DSF, all BPMN processes are started via messages. Therefore, a <a href="https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/#message-start-event" target="_blank" rel="noopener noreferrer">Message Start Event</a> has to be included at the beginning of all of your BPMN models.</p><h3 id="message-intermediate-throwing-event" tabindex="-1"><a class="header-anchor" href="#message-intermediate-throwing-event"><span>Message Intermediate Throwing Event</span></a></h3><p><a href="https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/#message-intermediate-throwing-event" target="_blank" rel="noopener noreferrer">Message Intermediate Throwing Events</a> are used to send messages during process execution.</p><h3 id="message-intermediate-catching-event" tabindex="-1"><a class="header-anchor" href="#message-intermediate-catching-event"><span>Message Intermediate Catching Event</span></a></h3>',8)),n("p",null,[e[1]||(e[1]=n("a",{href:"https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/#message-intermediate-catching-event",target:"_blank",rel:"noopener noreferrer"},"Message Intermediate Catching Events",-1)),e[2]||(e[2]=a(" serve as the counterpart to ",-1)),m(s,{to:"/process-development/api-v1/bpmn/messaging.html#message-intermediate-throwing-event"},{default:g(()=>[...e[0]||(e[0]=[a("Message Intermediate Throwing Events",-1)])]),_:1}),e[3]||(e[3]=a(". Use them whenever it is expected to receive a message from another process or organization during execution.",-1))]),e[5]||(e[5]=n("h3",{id:"message-end-event",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#message-end-event"},[n("span",null,"Message End Event")])],-1)),e[6]||(e[6]=n("p",null,[a("The "),n("a",{href:"https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/#message-end-event",target:"_blank",rel:"noopener noreferrer"},"Message End Event"),a(" will stop the execution of a BPMN process and finish by sending a message.")],-1))])}const b=r(h,[["render",c]]),w=JSON.parse('{"path":"/process-development/api-v1/bpmn/messaging.html","title":"Messaging","lang":"en-US","frontmatter":{"title":"Messaging","icon":"creative"},"git":{"createdTime":1712559938000,"updatedTime":1750687880000,"contributors":[{"name":"Jan BÃ¶hringer","username":"","email":"jan.boehringer@hs-heilbronn.de","commits":7},{"name":"Hauke Hund","username":"","email":"hauke.hund@hs-heilbronn.de","commits":1}]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"process-development/api-v1/bpmn/messaging.md","excerpt":"<h2>Messaging</h2>\\n<p>Enabling communication with other lanes, pools or even entirely separate processes requires the ability to exchange information. In BPMN, <a href=\\"https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Message Events</a> are used to model this information exchange. Modeling communication with <a href=\\"https://docs.camunda.org/manual/7.21/reference/bpmn20/events/message-events/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Message Events</a> in the same diagram uses Message Flow. Message Flow is typically represented by a dashed line arrow between BPMN elements with a black (send) or white (receive) envelope icon. The following BPMN collaboration diagram shows message exchange between two processes.</p>"}');export{b as comp,w as data};
