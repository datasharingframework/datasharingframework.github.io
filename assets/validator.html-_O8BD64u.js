import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as n}from"./app-VRpq1tPx.js";const i={};function o(r,e){return n(),s("div",null,[...e[0]||(e[0]=[t(`<h1 id="dsf-process-plugin-validator-v-1-3-0" tabindex="-1"><a class="header-anchor" href="#dsf-process-plugin-validator-v-1-3-0"><span>DSF Process Plugin Validator v 1.3.0</span></a></h1><h2 id="_1-introduction" tabindex="-1"><a class="header-anchor" href="#_1-introduction"><span>1  Introduction</span></a></h2><p>The <strong>DSF Validator</strong> is a quality‑assurance tool for Digital Sample Framework (DSF) process plugins. Version <strong>1.3.0</strong> extends the 1.2.0 release by adding</p><ul><li>a dedicated <strong>FHIR <em>Task</em> validator</strong> for the base profile <code>dsf-task-base</code>,</li><li>a <strong>StructureDefinition validator</strong> with slice‑aware cardinality checks,</li><li>enhanced terminology look‑ups via <strong>FhirAuthorizationCache</strong>, and</li><li>a streamlined <strong>CLI &amp; Maven plugin</strong> that share the same validation core.</li></ul><p>The validator now supports end‑to‑end consistency checks across BPMN models and all core FHIR artefacts used in the DSF platform. It targets <strong>Java 21</strong> and can be embedded in CI/CD pipelines, local project builds, or executed as a standalone JAR.</p><h2 id="_2-project-overview" tabindex="-1"><a class="header-anchor" href="#_2-project-overview"><span>2  Project Overview</span></a></h2><table><thead><tr><th>Component</th><th>Purpose</th></tr></thead><tbody><tr><td><strong>BPMN analysis</strong></td><td>Verifies Camunda‑compatible workflows (tasks, events, gateways, multi‑instance sub‑processes, field injections).</td></tr><tr><td><strong>FHIR analysis</strong></td><td>Validates XML/JSON resources against DSF profiles (ActivityDefinition, CodeSystem, Questionnaire, Task, ValueSet, <em>Task (base)</em>, StructureDefinition).</td></tr><tr><td><strong>Aggregator</strong></td><td><code>FhirInstanceValidatorAggregator</code> discovers concrete validators and produces a single <code>ValidationOutput</code>.</td></tr><tr><td><strong>Authorization cache</strong></td><td><code>FhirAuthorizationCache</code> holds all known DSF <code>CodeSystem</code> codes in a thread‑safe map for high‑performance terminology look‑ups.</td></tr><tr><td><strong>Report generator</strong></td><td>Writes structured JSON reports under <code>report/</code> (CLI) or <code>target/dsf-validation-reports/</code> (Maven plugin).</td></tr></tbody></table><p>Camunda models are parsed with the <strong>Camunda BPMN Model API</strong> (<a href="https://github.com/camunda/camunda-bpm-platform/blob/master/model-api/bpmn-model/README.asciidoc?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">github.com</a>), while FHIR resources are processed via standard DOM/XPath and validated by custom DSF-specific validators augmented by DSF‑specific rule sets.</p><h2 id="_3-validation-scope" tabindex="-1"><a class="header-anchor" href="#_3-validation-scope"><span>3  Validation Scope</span></a></h2><h3 id="_3-1-bpmn-model-validation-module-validator‐core" tabindex="-1"><a class="header-anchor" href="#_3-1-bpmn-model-validation-module-validator‐core"><span>3.1 BPMN Model Validation (module <code>validator‑core</code>)</span></a></h3><table><thead><tr><th>Validator</th><th>BPMN elements inspected</th><th>Key DSF rules enforced</th></tr></thead><tbody><tr><td><code>BpmnTaskValidator</code></td><td><code>ServiceTask</code>, <code>UserTask</code>, <code>SendTask</code>, <code>ReceiveTask</code></td><td>* camunda:class/expression must reference a Java class implementing <code>JavaDelegate</code>.<br>* Field injections validated against DSF profiles (<code>profile</code>, <code>message-name</code>, <code>instantiatesCanonical</code>).<br>* <code>UserTask → camunda:formKey</code> must resolve to an existing <code>Questionnaire</code> file.</td></tr><tr><td><code>BpmnEventValidator</code></td><td><code>StartEvent</code>, <code>EndEvent</code>, <code>IntermediateCatch</code>, <code>ThrowEvent</code>, <code>BoundaryEvent</code></td><td>* Message events require a non‑blank <code>&lt;bpmn:message name&gt;</code> and <code>&lt;bpmn:messageRef&gt;</code> pointing to an <code>ActivityDefinition.url</code>.<br>* Timer/signal events: ISO‑8601 expressions and registered signal definitions.</td></tr><tr><td><code>BpmnGatewayAndFlowValidator</code></td><td><code>ExclusiveGateway</code>, <code>EventBasedGateway</code>, <code>SequenceFlow</code></td><td>* Exclusive gateways: every outgoing <code>SequenceFlow</code> needs <code>name + conditionExpression</code>.<br>* Event‑based gateways: exactly one incoming flow; only allowed outgoing event types.</td></tr><tr><td><code>BpmnFieldInjectionValidator</code></td><td>Camunda <code>&lt;camunda:field&gt;</code></td><td>* <code>profile</code> must reference a <code>StructureDefinition</code> in <code>src/main/resources/fhir/StructureDefinition</code>.<br>* <code>message-name</code> must exist as an <code>input</code> slice in a <code>Task</code>.<br>* <code>instantiatesCanonical</code> must match an existing <code>ActivityDefinition</code>.</td></tr><tr><td><code>BpmnSubProcessValidator</code></td><td><code>SubProcess</code> (+ <code>MultiInstanceLoopCharacteristics</code>)</td><td>• Requires <code>camunda:asyncBefore=&quot;true&quot;</code> for multi-instance subprocesses. • Checks loop cardinality and clean termination.</td></tr></tbody></table><h3 id="_3-2-fhir-resource-validation-module-validator‐core" tabindex="-1"><a class="header-anchor" href="#_3-2-fhir-resource-validation-module-validator‐core"><span>3.2 FHIR Resource Validation (module <code>validator‑core</code>)</span></a></h3><table><thead><tr><th>DSF Profile &amp; Class</th><th>Mandatory elements</th><th>DSF‑specific checks</th><th>Shared checks</th></tr></thead><tbody><tr><td><strong>ActivityDefinition 1.0.0</strong>  <code>FhirActivityDefinitionValidator</code></td><td><code>url</code>, <code>status=&quot;unknown&quot;</code>, <code>kind=&quot;Task&quot;</code></td><td>* First <code>meta.tag</code> = system <code>…/read-access-tag</code>, code <code>ALL</code>.<br>* <code>extension-process-authorization</code>: every requester/recipient coding must be known to the authorization cache.</td><td>Placeholder enforcement (<code>#{version}</code>, <code>#{date}</code>)</td></tr><tr><td><strong>CodeSystem 1.0.0</strong>  <code>FhirCodeSystemValidator</code></td><td><code>url</code>, <code>name</code>, <code>title</code>, <code>publisher</code>, <code>content</code>, <code>caseSensitive</code></td><td>* <code>status=&quot;unknown&quot;</code>.<br>* <code>url</code> must start with <code>http://dsf.dev/fhir/CodeSystem/</code>.<br>* All <code>concept.code</code> values unique; each concept needs <code>code + display</code>.</td><td>Placeholder enforcement; read‑access tag</td></tr><tr><td><strong>Questionnaire 1.5.0</strong>  <code>FhirQuestionnaireValidator</code></td><td><code>meta.profile</code>, <code>url</code>, <code>version</code>, <code>date</code>, <code>status</code></td><td>* Mandatory items <code>business-key</code> &amp; <code>user-task-id</code> (type string, <code>required=true</code>).<br>* Ensures unique <code>linkId</code>; warns on non‑conformant patterns.</td><td>Placeholder enforcement; read‑access tag</td></tr><tr><td><strong>Task 1.0.0</strong>  <code>FhirTaskValidator</code></td><td><code>id</code>, <code>instantiatesCanonical</code>, <code>intent</code>, <code>status</code></td><td>* Required <code>input</code> slices <code>message-name</code>, <code>business-key</code>; optional <code>correlation-key</code>.<br>* Duplicate <code>input</code> slices detected via <code>Map&lt;String,Integer&gt;</code> counter.<br>* Output slice rules: if <code>status=failed</code> → must contain <code>error</code> slice.</td><td>Placeholder enforcement (<code>#{date}</code>, <code>#{organization}</code>); terminology look‑ups via the authorization cache</td></tr><tr><td><strong>ValueSet 1.0.0</strong>  <code>FhirValueSetValidator</code></td><td><code>url</code>, <code>name</code>, <code>title</code>, <code>publisher</code>, <code>description</code></td><td>* Enforces read‑access tag.<br>* <code>compose.include</code>: each <code>system</code> present; <code>concept.code</code> non‑blank and known.<br>* Flags duplicate concepts within the same <code>include</code> block.</td><td>Placeholder enforcement (<code>#{version}</code>, <code>#{date}</code>)</td></tr><tr><td><strong>StructureDefinition 1.0.0</strong>  <code>FhirStructureDefinitionValidator</code> <br>(<strong>NEW in v1.3.0</strong>)</td><td><code>meta.profile</code>, <code>differential</code>, <code>url</code></td><td>* Must contain <code>meta.tag</code> &amp; <code>meta.profile</code>.<br>* <code>version</code> and <code>date</code> fields require <code>#{version}</code> / <code>#{date}</code> placeholders.<br>* No <code>snapshot</code> allowed; all element <code>@id</code>s unique.<br>* <strong>Slice cardinality</strong>: min/max constraints are verified for each slice using rules from FHIR §5.1.0.14 (<a href="https://build.fhir.org/profiling.html?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">build.fhir.org</a>).</td><td>Placeholder enforcement; read‑access tag</td></tr></tbody></table><h3 id="_3-3-cross‐resource-consistency" tabindex="-1"><a class="header-anchor" href="#_3-3-cross‐resource-consistency"><span>3.3 Cross‑resource Consistency</span></a></h3><p><em>The validator resolves every <code>&lt;bpmn:messageRef&gt;</code> to its canonical URL and verifies that a corresponding <code>ActivityDefinition.url</code> exists. Field injections (<code>profile</code>, <code>message-name</code>, <code>instantiatesCanonical</code>) are likewise cross-checked against the available FHIR artefacts to ensure that referenced canonicals exist. <strong>Slice-level conformity to the referenced <code>StructureDefinition</code> is not evaluated.</strong></em></p><h2 id="_4-validation-approach" tabindex="-1"><a class="header-anchor" href="#_4-validation-approach"><span>4  Validation Approach</span></a></h2><ol><li><strong>File discovery</strong> – Recursively searches for either full Maven-style paths (e.g., <code>src/main/resources/bpe</code>) or flat folder names (e.g., <code>bpe</code>). Supports both Maven projects and unpacked JARs in CI.</li><li><strong>BPMN pass</strong> – Camunda Model API parses the model; validators run sequentially.</li><li><strong>FHIR pass</strong> – XML/JSON files stream through <code>FhirInstanceValidatorAggregator</code>, which delegates to each concrete validator.</li><li><strong>Slice cardinality checks</strong> – For every <code>StructureDefinition</code>, the validator loads min/max values of the base and sliced elements and enforces them according to FHIR profiling rules §5.1.0.14 (<a href="https://build.fhir.org/profiling.html?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">build.fhir.org</a>).</li><li><strong>Terminology</strong> – <code>FhirAuthorizationCache</code> accelerates terminology look-ups (read-access tags, concept codes). Authorization checks for requester/recipient organisations rely on these look-ups at run time but are not cached.*</li><li><strong>Output generation</strong> – All validation items are collected, sorted, and written to JSON reports.</li></ol><h2 id="_5-implementation-components" tabindex="-1"><a class="header-anchor" href="#_5-implementation-components"><span>5  Implementation &amp; Components</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>validator-core</span></span>
<span class="line"><span> ├─ BpmnModelValidator</span></span>
<span class="line"><span> │   ├─ BpmnEventValidator</span></span>
<span class="line"><span> │   ├─ BpmnGatewayAndFlowValidator</span></span>
<span class="line"><span> │   ├─ BpmnTaskValidator</span></span>
<span class="line"><span> │   ├─ BpmnFieldInjectionValidator</span></span>
<span class="line"><span> │   └─ BpmnSubProcessValidator</span></span>
<span class="line"><span> ├─ AbstractFhirInstanceValidator           (base class)</span></span>
<span class="line"><span> │   ├─ FhirActivityDefinitionValidator</span></span>
<span class="line"><span> │   ├─ FhirCodeSystemValidator</span></span>
<span class="line"><span> │   ├─ FhirQuestionnaireValidator</span></span>
<span class="line"><span> │   ├─ FhirTaskValidator</span></span>
<span class="line"><span> │   ├─ FhirValueSetValidator</span></span>
<span class="line"><span> │   ├─ FhirStructureDefinitionValidator     ← NEW</span></span>
<span class="line"><span> ├─ FhirResourceValidator</span></span>
<span class="line"><span> ├─ FhirInstanceValidatorAggregator</span></span>
<span class="line"><span> ├─ FhirAuthorizationCache</span></span>
<span class="line"><span> ├─ ValidationOutput                         (print + JSON export)</span></span>
<span class="line"><span> ├─ ReportCleaner</span></span>
<span class="line"><span> ├─ ApiVersionDetector / ApiVersionHolder</span></span>
<span class="line"><span> ├─ MavenBuilder</span></span>
<span class="line"><span> └─ DsfValidatorImpl</span></span>
<span class="line"><span>validator-cli</span></span>
<span class="line"><span> └─ Main (Picocli CLI entry point)</span></span>
<span class="line"><span>validator-maven-plugin</span></span>
<span class="line"><span> └─ ValidateMojo (goal bound to *verify* phase)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-build-system-dependencies" tabindex="-1"><a class="header-anchor" href="#_6-build-system-dependencies"><span>6  Build System &amp; Dependencies</span></a></h2><ul><li><strong>Apache Maven</strong> – multi‑module build (<code>dsf-validator</code>, <code>validator-core</code>, <code>validator-api</code>, <code>validator-cli</code>).</li><li><strong>Java 21</strong> target, <strong>Byte Buddy</strong> for test instrumentation.</li><li>External libraries: Camunda BPMN Model API (<a href="https://github.com/camunda/camunda-bpm-platform/blob/master/model-api/bpmn-model/README.asciidoc?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">github.com</a>), <strong>Picocli</strong>, <strong>JGit</strong>, <strong>Jackson</strong>, <strong>JUnit 5</strong>, <strong>Mockito</strong>.</li></ul><h2 id="_7-running-the-validator" tabindex="-1"><a class="header-anchor" href="#_7-running-the-validator"><span>7 Running the Validator</span></a></h2><p>The DSF Validator supports multiple execution environments:</p><table><thead><tr><th><strong>Scenario</strong></th><th><strong>Command / Configuration</strong></th></tr></thead><tbody><tr><td><strong>CLI – local folder</strong></td><td><code>java -jar dsf-validator-1.3.0.jar --localPath /path/to/project</code></td></tr><tr><td><strong>CLI – remote Git repo</strong></td><td><code>java -jar dsf-validator-1.3.0.jar --remoteRepo https://gitlab.com/org/repo.git</code></td></tr><tr><td><strong>Maven (one-shot)</strong></td><td><code>mvn dev.dsf.utils.validator:validator-maven-plugin:verify</code></td></tr><tr><td><strong>Maven (POM snippet)</strong></td><td><code>xml&lt;br&gt;&lt;plugin&gt;&lt;br&gt; &lt;groupId&gt;dev.dsf.utils.validator&lt;/groupId&gt;&lt;br&gt; &lt;artifactId&gt;validator-maven-plugin&lt;/artifactId&gt;&lt;br&gt; &lt;version&gt;1.2&lt;/version&gt;&lt;br&gt; &lt;executions&gt;&lt;br&gt; &lt;execution&gt;&lt;br&gt; &lt;phase&gt;verify&lt;/phase&gt;&lt;br&gt; &lt;goals&gt;&lt;goal&gt;verify&lt;/goal&gt;&lt;/goals&gt;&lt;br&gt; &lt;/execution&gt;&lt;br&gt; &lt;/executions&gt;&lt;br&gt;&lt;/plugin&gt;</code></td></tr><tr><td><strong>CI Pipeline (GitLab)</strong></td><td>See below – fully automated GitLab CI validation pipeline using containerized validator image</td></tr></tbody></table><hr><h3 id="maven-plugin-features" tabindex="-1"><a class="header-anchor" href="#maven-plugin-features"><span>Maven Plugin Features</span></a></h3><ul><li>Runs during <code>verify</code>, <code>compile</code>, or <code>install</code> phase.</li><li>Validates BPMN models (<code>src/main/resources/bpe</code>) and FHIR resources (<code>src/main/resources/fhir</code>).</li><li>Reports are written to:<br><code>target/dsf-validation-reports/</code></li></ul><p><strong>Example Output Structure:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>target/dsf-validation-reports/</span></span>
<span class="line"><span>├── bpmnReports/</span></span>
<span class="line"><span>│   ├── success/</span></span>
<span class="line"><span>│   ├── other/</span></span>
<span class="line"><span>│   └── bpmn_issues_aggregated.json</span></span>
<span class="line"><span>├── fhirReports/</span></span>
<span class="line"><span>│   ├── success/</span></span>
<span class="line"><span>│   ├── other/</span></span>
<span class="line"><span>│   └── fhir_issues_aggregated.json</span></span>
<span class="line"><span>└── aggregated.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The validator automatically runs<br><code>mvn clean package dependency:copy-dependencies</code> before analysis.</p><hr><h3 id="gitlab-ci-pipeline-features" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-pipeline-features"><span>GitLab CI Pipeline Features</span></a></h3><p>The DSF validation pipeline enables automated quality checks of submitted plugins using Dockerized jobs.</p><h4 id="pipeline-overview" tabindex="-1"><a class="header-anchor" href="#pipeline-overview"><span><strong>Pipeline Overview</strong></span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Example job in .gitlab-ci.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">analyze-dsf-validator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">analyze</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">registry.it.hs-heilbronn.de/dsf/qs/hub-qa-pipeline/dsf-validator:1.2-3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entrypoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">java -jar /opt/validator/validator.jar --localPath output</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mkdir -p &quot;$CI_PROJECT_DIR/reports/dsf-validator&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cp -r report/* &quot;$CI_PROJECT_DIR/reports/dsf-validator/&quot; || true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span><strong>Features</strong></span></a></h4><ul><li><p><strong>Input:</strong> Validated plugin is extracted from the submitted JAR.</p></li><li><p><strong>Execution flow:</strong></p><ul><li><code>build1</code> stage prepares the plugin.</li><li><code>analyze-dsf-validator</code> performs static validation of BPMN and FHIR resources.</li><li><code>collect-reports</code> aggregates results from all analyzers into <code>final-reports/</code>.</li></ul></li></ul><h4 id="outputs" tabindex="-1"><a class="header-anchor" href="#outputs"><span><strong>Outputs</strong></span></a></h4><p>All JSON-formatted validation results are stored as GitLab artifacts under:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>final-reports/</span></span>
<span class="line"><span>└── dsf-validator/</span></span>
<span class="line"><span>    ├── bpmnReports/</span></span>
<span class="line"><span>    ├── fhirReports/</span></span>
<span class="line"><span>    └── aggregated.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements"><span><strong>Requirements</strong></span></a></h4><ul><li>Internet access (for downloading dependencies and validator image)</li><li>Maven-compatible environment</li><li>Container image:<br><code>registry.it.hs-heilbronn.de/dsf/qs/hub-qa-pipeline/dsf-validator:1.2-3</code></li></ul><hr><h2 id="_8-data-processing-storage" tabindex="-1"><a class="header-anchor" href="#_8-data-processing-storage"><span>8  Data Processing &amp; Storage</span></a></h2><p>Validation items are materialised as <code>BpmnElementValidationItem</code> or <code>FhirElementValidationItem</code> and serialised to JSON. The <strong>top‑level <code>aggregated.json</code></strong> summarises overall status (<code>ERROR</code> / <code>WARN</code> / <code>INFO</code> / <code>SUCCESS</code>).</p><h2 id="_9-execution-workflow" tabindex="-1"><a class="header-anchor" href="#_9-execution-workflow"><span>9  Execution Workflow</span></a></h2><ol><li><strong>RepositoryManager</strong> clones remote sources if requested.</li><li><strong>MavenBuilder</strong> compiles the project.</li><li><strong>BpmnModelValidator</strong> &amp; <strong>FhirInstanceValidatorAggregator</strong> perform analysis.</li><li><strong>ReportCleaner</strong> purges previous results; writers store fresh reports.</li><li><strong>ApiVersionDetector</strong> prints the detected DSF BPE API version (v1 or v2).</li></ol><h2 id="_10-expected-output" tabindex="-1"><a class="header-anchor" href="#_10-expected-output"><span>10  Expected Output</span></a></h2><ul><li><strong>Errors</strong> – fatal; block deployment.</li><li><strong>Warnings</strong> – non‑fatal but may break runtime paths.</li><li><strong>Info</strong> – best‑practice hints (e.g. missing <code>display</code> in <code>CodeSystem.concept</code>).</li></ul><p>Developers review <code>report/aggregated.json</code> or per‑file reports under <code>success/</code> and <code>other/</code>.</p><h2 id="_11-conclusion" tabindex="-1"><a class="header-anchor" href="#_11-conclusion"><span>11  Conclusion</span></a></h2><p>Version <strong>1.3.0</strong> turns the DSF Validator into a <em>profile‑aware</em> verification tool:</p><ul><li>It validates every BPMN construct and all core FHIR artefacts <em>plus</em> the DSF‑specific <code>dsf-task-base</code> profile and StructureDefinitions.</li><li>It caches authorised <code>CodeSystem</code> codes, enforces slice cardinalities (<a href="https://build.fhir.org/profiling.html?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">build.fhir.org</a>), and guards core metadata placeholders.</li><li>It can be launched via an intuitive CLI or a zero‑configuration Maven plugin, making it an early quality gate that helps DSF process authors catch structural, semantic, and interoperability issues long before deployment.</li></ul>`,53)])])}const c=a(i,[["render",o]]),p=JSON.parse('{"path":"/process-development/api-v2/tooling/validator.html","title":"Process Plugin Validator","lang":"en-US","frontmatter":{"title":"Process Plugin Validator","icon":"operate"},"git":{"createdTime":1747823207000,"updatedTime":1751470444000,"contributors":[{"name":"Serap Aydin","username":"","email":"saydin3@stud.hs-heilbronn.de","commits":3}]},"readingTime":{"minutes":4.82,"words":1447},"filePathRelative":"process-development/api-v2/tooling/validator.md","excerpt":"\\n<h2>1&nbsp;&nbsp;Introduction</h2>\\n<p>The <strong>DSF&nbsp;Validator</strong> is a quality‑assurance tool for Digital&nbsp;Sample&nbsp;Framework (DSF) process plugins. Version&nbsp;<strong>1.3.0</strong> extends the 1.2.0 release by adding</p>\\n<ul>\\n<li>a dedicated <strong>FHIR&nbsp;<em>Task</em> validator</strong> for the base profile&nbsp;<code>dsf-task-base</code>,</li>\\n<li>a <strong>StructureDefinition validator</strong> with slice‑aware cardinality checks,</li>\\n<li>enhanced terminology look‑ups via <strong>FhirAuthorizationCache</strong>, and</li>\\n<li>a streamlined <strong>CLI &amp; Maven&nbsp;plugin</strong> that share the same validation core.</li>\\n</ul>"}');export{c as comp,p as data};
