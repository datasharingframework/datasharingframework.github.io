import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,a as o,d as a,e as s,w as l,r as d,o as m}from"./app-VRpq1tPx.js";const c={};function p(h,e){const r=d("RouteLink");return m(),i("div",null,[e[3]||(e[3]=n("h2",{id:"environment-variables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#environment-variables"},[n("span",null,"Environment Variables")])],-1)),n("p",null,[e[1]||(e[1]=a("Environment variables offer a way to make configuration data available at the start of a ",-1)),s(r,{to:"/process-development/api-v2/dsf/bpmn-process-execution.html"},{default:l(()=>[...e[0]||(e[0]=[a("BPMN process execution",-1)])]),_:1}),e[2]||(e[2]=o('. They are the same for all running process instances. They can be defined by adding a member variable with the <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-value-annotations" target="_blank" rel="noopener noreferrer">Spring-Framework @Value</a> annotation to any Spring managed bean. For the DSF, the most prominent are classes annotated with <a href="https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html" target="_blank" rel="noopener noreferrer"><code>@Configuration</code></a>. The value of the annotation uses the <code>${..}</code> notation and follows the form <code>${some.property:defaultValue}</code>, where each dot in the property name corresponds to an underscore in the equivalent environment variable. Environment variables are always written upper-case. The property <code>some.property</code> therefore corresponds to the environment variable <code>SOME_PROPERTY</code>.',13))]),e[4]||(e[4]=o('<p>The DSF provides a feature to automatically generate documentation of environment variables during the Maven build process. The <code>@ProcessDocumentation</code> annotation can be used to automatically generate Markdown documentation for all fields with this annotation. This requires adding <a href="https://mvnrepository.com/artifact/dev.dsf/dsf-tools-documentation-generator" target="_blank" rel="noopener noreferrer">dsf-tools-documentation-generator</a> as a maven plugin. There is an example <code>pom.xml</code> for the <code>tutorial-process</code> submodule located on <a href="https://github.com/datasharingframework/dsf-process-tutorial/blob/main/tutorial-process/pom.xml" target="_blank" rel="noopener noreferrer">GitHub</a> which uses the maven plugin. The <code>&lt;workingPackage&gt;</code> field has to point to the package where documentation is desired.</p>',1))])}const v=t(c,[["render",p]]),b=JSON.parse('{"path":"/process-development/api-v2/dsf/environment-variables.html","title":"Environment Variables","lang":"en-US","frontmatter":{"title":"Environment Variables","icon":"creative"},"git":{"createdTime":1712559938000,"updatedTime":1750687880000,"contributors":[{"name":"Jan BÃ¶hringer","username":"","email":"jan.boehringer@hs-heilbronn.de","commits":6},{"name":"Hauke Hund","username":"","email":"hauke.hund@hs-heilbronn.de","commits":1},{"name":"Simon Schweizer","username":"","email":"simon@schwzr.de","commits":1}]},"readingTime":{"minutes":0.72,"words":215},"filePathRelative":"process-development/api-v2/dsf/environment-variables.md","excerpt":"<h2>Environment Variables</h2>\\n<p>Environment variables offer a way to make configuration data available at the start of a <a href=\\"/process-development/api-v2/dsf/bpmn-process-execution.html\\" target=\\"_blank\\">BPMN process execution</a>. They are the same for all running process instances. They can be defined by adding a member variable with the <a href=\\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-value-annotations\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Spring-Framework @Value</a> annotation to any Spring managed bean. For the DSF, the most prominent are classes annotated with <a href=\\"https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@Configuration</code></a>. The value of the annotation uses the <code>${..}</code> notation and follows the form <code>${some.property:defaultValue}</code>, where each dot in the property name corresponds to an underscore in the equivalent environment variable. Environment variables are always written upper-case. The property <code>some.property</code> therefore corresponds to the environment variable <code>SOME_PROPERTY</code>.</p>"}');export{v as comp,b as data};
