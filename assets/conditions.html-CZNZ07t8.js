import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,d as o,e as a,w as r,r as l,o as d}from"./app-VRpq1tPx.js";const p={};function m(u,e){const t=l("RouteLink");return d(),i("div",null,[e[23]||(e[23]=n("h2",{id:"conditions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conditions"},[n("span",null,"Conditions")])],-1)),n("p",null,[e[4]||(e[4]=o("BPMN elements can have a property attached to them which either executes a script or evaluates an expression in order to make a decision. The most common example of this is the ",-1)),a(t,{to:"/process-development/api-v2/bpmn/sequence-flow.html"},{default:r(()=>[...e[0]||(e[0]=[o("Sequence Flow",-1)])]),_:1}),e[5]||(e[5]=o(" elements following an ",-1)),a(t,{to:"/process-development/api-v2/bpmn/gateways.html"},{default:r(()=>[...e[1]||(e[1]=[o("Exclusive Gateway",-1)])]),_:1}),e[6]||(e[6]=o(". Each ",-1)),a(t,{to:"/process-development/api-v2/bpmn/sequence-flow.html"},{default:r(()=>[...e[2]||(e[2]=[o("Sequence Flow",-1)])]),_:1}),e[7]||(e[7]=o(" element will have a condition attached to decide which flow should be pursued. The ",-1)),e[8]||(e[8]=n("a",{href:"https://camunda.com/download/modeler/",target:"_blank",rel:"noopener noreferrer"},"Camunda Modeler",-1)),e[9]||(e[9]=o(" distinguishes the two types in the ",-1)),e[10]||(e[10]=n("code",null,"Type",-1)),e[11]||(e[11]=o(" attribute of the ",-1)),e[12]||(e[12]=n("code",null,"Condition",-1)),e[13]||(e[13]=o(" tab in a BPMN element. Camunda comes with a GraalVM JavaScript engine but can be extended with other types of scripting engines. See the Camunda documentation on ",-1)),e[14]||(e[14]=n("a",{href:"https://docs.camunda.org/manual/latest/user-guide/process-engine/scripting/",target:"_blank",rel:"noopener noreferrer"},"scripting",-1)),e[15]||(e[15]=o(" for more details. Expressions are short boolean evaluations and have the following syntax: ",-1)),e[16]||(e[16]=n("code",null,"${expression}",-1)),e[17]||(e[17]=o(". An example of a simple expression would be a condition like ",-1)),e[18]||(e[18]=n("code",null,"var = true",-1)),e[19]||(e[19]=o(". For this to work during BPMN process execution, the variable that is used for the boolean condition must be available in the BPMN process variables before the ",-1)),a(t,{to:"/process-development/api-v2/bpmn/sequence-flow.html"},{default:r(()=>[...e[3]||(e[3]=[o("Sequence Flow",-1)])]),_:1}),e[20]||(e[20]=o(" reaches the evaluation of the expression. You can learn more advanced features of Expressions ",-1)),e[21]||(e[21]=n("a",{href:"https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/",target:"_blank",rel:"noopener noreferrer"},"here",-1)),e[22]||(e[22]=o(".",-1))])])}const b=s(p,[["render",m]]),g=JSON.parse('{"path":"/process-development/api-v2/bpmn/conditions.html","title":"Conditions","lang":"en-US","frontmatter":{"title":"Conditions","icon":"creative"},"git":{"createdTime":1712559938000,"updatedTime":1749825640000,"contributors":[{"name":"Jan BÃ¶hringer","username":"","email":"jan.boehringer@hs-heilbronn.de","commits":7},{"name":"Hauke Hund","username":"","email":"hauke.hund@hs-heilbronn.de","commits":1},{"name":"Simon Schweizer","username":"","email":"simon@schwzr.de","commits":1}]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"process-development/api-v2/bpmn/conditions.md","excerpt":"<h2>Conditions</h2>\\n<p>BPMN elements can have a property attached to them which either executes a script or evaluates an expression in order to make a decision. The most common example of this is the <a href=\\"/process-development/api-v2/bpmn/sequence-flow.html\\" target=\\"_blank\\">Sequence Flow</a> elements following an <a href=\\"/process-development/api-v2/bpmn/gateways.html\\" target=\\"_blank\\">Exclusive Gateway</a>. Each <a href=\\"/process-development/api-v2/bpmn/sequence-flow.html\\" target=\\"_blank\\">Sequence Flow</a> element will have a condition attached to decide which flow should be pursued. The <a href=\\"https://camunda.com/download/modeler/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Camunda Modeler</a> distinguishes the two types in the <code>Type</code> attribute of the <code>Condition</code> tab in a BPMN element. Camunda comes with a GraalVM JavaScript engine but can be extended with other types of scripting engines. See the Camunda documentation on <a href=\\"https://docs.camunda.org/manual/latest/user-guide/process-engine/scripting/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">scripting</a> for more details. Expressions are short boolean evaluations and have the following syntax: <code>${expression}</code>. An example of a simple expression would be a condition like <code>var = true</code>. For this to work during BPMN process execution, the variable that is used for the boolean condition must be available in the BPMN process variables before the <a href=\\"/process-development/api-v2/bpmn/sequence-flow.html\\" target=\\"_blank\\">Sequence Flow</a> reaches the evaluation of the expression. You can learn more advanced features of Expressions <a href=\\"https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">here</a>.</p>"}');export{b as comp,g as data};
