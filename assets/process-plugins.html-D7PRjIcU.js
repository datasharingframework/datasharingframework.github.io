import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o}from"./app-VRpq1tPx.js";const a="/photos/info/plugins/bpmn-example.png",t="/photos/info/use-cases/ping-pongv2.png",r={};function p(l,e){return o(),i("div",null,[...e[0]||(e[0]=[n('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>It is important to understand that the DSF is <em>only</em> the silent helper in the background: a middleware. The DSF is use case agnostic. This means that process plugins make it possible to execute almost any use case you can imagine with the DSF. Process plugins provide individual functionality.</p><p>However, it is possible to deploy several process plugins parallel on the same DSF instance, even the same process plugin in different versions. A process plugin is basically an archive of BPMN 2.0 models, FHIR R4 resources and Java code. This process plugin is deployed as a Jar file on the BPE.</p><h2 id="bpmn-example" tabindex="-1"><a class="header-anchor" href="#bpmn-example"><span>BPMN: Example</span></a></h2><p>BPMN models can be created with <a href="https://camunda.com/de" target="_blank" rel="noopener noreferrer">Camunda Modeler</a>. The following model is a BPMN model consisting of two lanes: These are the square boxes, i.e. Organization A and B. This process is intended only as an example to illustrate the formalities.</p><figure><img src="'+a+'" alt="BPMN: Example" tabindex="0" loading="lazy"><figcaption>BPMN: Example</figcaption></figure><h2 id="ping-pong-process-as-an-example-process-plugin" tabindex="-1"><a class="header-anchor" href="#ping-pong-process-as-an-example-process-plugin"><span>Ping Pong Process as an example Process Plugin</span></a></h2><p>The <a href="https://github.com/datasharingframework/dsf-process-ping-pong" target="_blank" rel="noopener noreferrer">ping process plugin</a> can be used for (periodic) connection testing between organizations that are part of your DSF allow list. The following figure shows a representation of the process.</p><figure><img src="'+t+'" alt="Ping-Pong Process v.2" tabindex="0" loading="lazy"><figcaption>Ping-Pong Process v.2</figcaption></figure><p>The ping pong process is composed of 3 different subprocesses:</p><h3 id="autostart-ping-process" tabindex="-1"><a class="header-anchor" href="#autostart-ping-process"><span>Autostart Ping Process</span></a></h3><p>The autostart ping process is used to execute connection tests in a predefined interval. This subprocess performs the following steps:</p><ul><li>Start a timer with a predefined interval (default 24 h)</li><li>Start the ping process once per interval</li><li>Stop the timer after the current interval completes</li></ul><h3 id="ping-process" tabindex="-1"><a class="header-anchor" href="#ping-process"><span>Ping Process</span></a></h3><p>The ping process is used to check outgoing and incoming connections to organizations in your allow-list. This subprocess performs the following steps:</p><ul><li>Select organizations in your allow list that should receive a ping message</li><li>Send ping message to selected organizations</li><li>Receive pong message from selected organizations</li><li>Log status of ping/pong messages</li><li>Log errors if any occur</li></ul><h3 id="pong-process" tabindex="-1"><a class="header-anchor" href="#pong-process"><span>Pong Process</span></a></h3><p>The pong process is used to send a response during the connection test to the requesting organization. This subprocess performs the following steps:</p><ul><li>Receive ping message from requesting organizations</li><li>Send pong message to requesting organizations</li><li>Log status of ping/pong message</li><li>Log errors if any occur</li></ul>',19)])])}const h=s(r,[["render",p]]),d=JSON.parse('{"path":"/explore/concepts/process-plugins.html","title":"Process Plugins","lang":"en-US","frontmatter":{"title":"Process Plugins","icon":"plugin"},"git":{"createdTime":1690473388000,"updatedTime":1754487684000,"contributors":[{"name":"Simon MÃ¶dinger","username":"","email":"smoeding@stud.hs-heilbronn.de","commits":6},{"name":"Serap Aydin","username":"","email":"saydin3@stud.hs-heilbronn.de","commits":4},{"name":"Simon Schweizer","username":"","email":"simon-tobias.schweizer@hs-heilbronn.de","commits":1}]},"readingTime":{"minutes":1.7,"words":511},"filePathRelative":"explore/concepts/process-plugins.md","excerpt":"<h2>Overview</h2>\\n<p>It is important to understand that the DSF is <em>only</em> the silent helper in the background: a middleware. The DSF is use case agnostic. This means that process plugins make it possible to execute almost any use case you can imagine with the DSF. Process plugins provide individual functionality.</p>"}');export{h as comp,d as data};
